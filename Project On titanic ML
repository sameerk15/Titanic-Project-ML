import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

df=pd.read_csv('Titanic.csv')
df.head()
df.info()
df.describe()

df.isnull().sum()
sns.heatmap(df.isnull(),yticklabels=False,cmap='viridis')
df.corr()
sns.heatmap(df.corr(),annot=True,linewidth=.5)

sns.set(style='darkgrid')
sns.countplot('Survived',data=df,color='yellow',dodge=True,palette='twilight')
plt.xlabel('Survived/Not survived')
plt.ylabel('Frequency')
plt.title('Graph representing number of survivors and non survivors')
plt.show()

sns.countplot('Survived',hue='Sex',data=df,dodge=True,palette='BrBG')
plt.xlabel('Survived/Not survived')
plt.ylabel('Frequency')
plt.title('Survivor and non survivor based on gender')
plt.show()

sns.countplot('Pclass',data=df)
sns.catplot('Pclass',hue='Sex',col='Survived',kind='count',data=df,palette='cubehelix_r')
sns.distplot(df['Age'].dropna(),kde=False)

sns.boxplot('Pclass','Age',data=df)
sns.distplot(df['Fare'].dropna(),kde=False)
sns.pairplot(df)
sns.scatterplot('Pclass','Fare',data=df,hue='Sex')
sns.scatterplot('Age','Fare',data=df)

sns.catplot('SibSp',hue='Sex',col='Survived',kind='count',data=df,palette='cubehelix_r')

df.head()
df.drop(['Ticket','Name','Parch'],axis=1,inplace=True)

def impute_nan(df,Age,median):
    df['Age_median']=df['Age'].fillna(median)
median=df.Age.median()
median
impute_nan(df,'Age',median)
df.head()

df.drop('Age',axis=1,inplace=True)
df['Age_median'].isnull().mean()

df['Embarked'].fillna('S',inplace=True)

df1=pd.get_dummies(df['Sex'],drop_first=True)
df1.head()
df=pd.concat([df1,df],axis=1)

df.drop('Sex',axis=1,inplace=True)
df2=pd.get_dummies(df['Embarked'],drop_first=True)
df=pd.concat([df2,df],axis=1)

df.drop('Embarked',axis=1,inplace=True)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=10)
from sklearn.linear_model import LogisticRegression
reg=LogisticRegression()
reg.fit(X_train,Y_train)
Y_pred=reg.predict(X_test)
reg.score(X_train,Y_train)
reg.predict([[0,1,1,591,3,0,7.1250,35.0]])

from sklearn.model_selection import cross_val_score
score=cross_val_score(reg,X_train,Y_train)
score
score.mean()

from sklearn.metrics import accuracy_score
accuracy_score(Y_test,Y_pred)


from sklearn.metrics import roc_auc_score
roc_auc_score(Y_test,Y_pred)







